#lang racket

(define (tree? t)
  (or (null? t)
      (and (list? t)
           (= (length t 3))
           (tree? (cadr t))
           (tree? (caddr t)))))

(define empty-tree '())
(define (make-tree root left right) (list root left right))

(define root-tree car)
(define left-tree cadr)
(define right-tree caddr)

(define empty-tree? null?)
(define (1+ x) (+ 1 x))

(define (depth-tree t)
  (if (empty-tree? t) 0
      (1+ (max (depth-tree (left-tree t)) (depth-tree (right-tree t))))))

(define (memv-tree x t)
  (if (empty-tree? t) #f
      (if (eqv? x (root-tree t)) #t
          (or
           (memv-tree x (left-tree t))
           (memv-tree x (right-tree t))))))

(define (path-tree x t)
  (if (empty-tree? t) #f
      (if (eqv? x (root-tree t)) (list x)
          (if (not (eqv? (path-tree x (left-tree t)) #f))
              (cons (root-tree t) (path-tree x (left-tree t)))
              (if (not (eqv? (path-tree x (right-tree t)) #f))
                  (cons (root-tree t) (path-tree x (right-tree t)))
                  #f)))))


(define (cons#f h t) (and t (cons h t)))

(define (path-tree2 x t)
  (cond ((empty-tree? t) #f)
        ((eqv? x (root-tree t)) (list x))
        (else
         (cons#f (root-tree t)
                 (or (path-tree2 x (left-tree t))
                     (path-tree2 x (right-tree t)))))))

